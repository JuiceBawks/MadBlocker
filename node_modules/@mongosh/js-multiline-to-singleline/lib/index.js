"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeMultilineJSIntoSingleLine = void 0;
const babel = __importStar(require("@babel/core"));
function lineCommentToBlockComment() {
    const visitedComments = new Map();
    function turnCommentIntoBlock(original) {
        const existing = visitedComments.get(original);
        if (existing) {
            return existing;
        }
        const replacement = { ...original, type: 'CommentBlock' };
        visitedComments.set(original, replacement);
        return replacement;
    }
    function transformComments(path) {
        var _a, _b;
        const node = path.node;
        const keys = ['leadingComments', 'trailingComments', 'innerComments'];
        for (const key of keys) {
            node[key] = (_b = (_a = node[key]) === null || _a === void 0 ? void 0 : _a.map(turnCommentIntoBlock)) !== null && _b !== void 0 ? _b : null;
        }
    }
    return {
        visitor: {
            Program(path) {
                transformComments(path);
                path.traverse({
                    enter(path) {
                        transformComments(path);
                    }
                });
            }
        }
    };
}
function makeMultilineJSIntoSingleLine(src) {
    var _a, _b;
    let postASI;
    try {
        postASI = (_b = (_a = babel.transformSync(src, {
            retainLines: true,
            compact: false,
            code: true,
            comments: true,
            plugins: [lineCommentToBlockComment],
            sourceType: 'script'
        })) === null || _a === void 0 ? void 0 : _a.code) !== null && _b !== void 0 ? _b : src;
    }
    catch (_c) {
        postASI = src;
    }
    const asSingleLine = postASI.split(/[\r\n]+/g)
        .map(line => line.trim())
        .join(' ')
        .trim();
    return src.trim().endsWith(';') ? asSingleLine : asSingleLine.replace(/;$/, '');
}
exports.makeMultilineJSIntoSingleLine = makeMultilineJSIntoSingleLine;
//# sourceMappingURL=index.js.map