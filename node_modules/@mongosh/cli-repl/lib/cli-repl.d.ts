/// <reference types="node" />
import { AutoEncryptionOptions } from '@mongosh/service-provider-core';
import { CliOptions, CliServiceProvider, MongoClientOptions } from '@mongosh/service-provider-server';
import Analytics from 'analytics-node';
import ConnectionString from 'mongodb-connection-string-url';
import { Readable, Writable } from 'stream';
import type { StyleDefinition } from './clr';
import { ConfigManager, ShellHomeDirectory, ShellHomePaths } from './config-directory';
import { MongoLogManager, MongoLogWriter } from 'mongodb-log-writer';
import { MongocryptdManager } from './mongocryptd-manager';
import MongoshNodeRepl, { MongoshNodeReplOptions } from './mongosh-repl';
import { MongoshBus, CliUserConfig } from '@mongosh/types';
declare type AnalyticsOptions = {
    host?: string;
    apiKey?: string;
    alwaysEnable?: boolean;
};
export declare type CliReplOptions = {
    shellCliOptions: CliOptions;
    mongocryptdSpawnPaths?: string[][];
    input: Readable;
    output: Writable;
    shellHomePaths: ShellHomePaths;
    onExit: (code?: number) => never;
    analyticsOptions?: AnalyticsOptions;
} & Pick<MongoshNodeReplOptions, 'nodeReplOptions'>;
declare type CliUserConfigOnDisk = Partial<CliUserConfig> & Pick<CliUserConfig, 'enableTelemetry' | 'userId'>;
declare class CliRepl {
    mongoshRepl: MongoshNodeRepl;
    bus: MongoshBus;
    cliOptions: CliOptions;
    mongocryptdManager: MongocryptdManager;
    shellHomeDirectory: ShellHomeDirectory;
    configDirectory: ConfigManager<CliUserConfigOnDisk>;
    config: CliUserConfigOnDisk;
    logManager: MongoLogManager;
    logWriter?: MongoLogWriter;
    input: Readable;
    output: Writable;
    analyticsOptions?: AnalyticsOptions;
    analytics?: Analytics;
    warnedAboutInaccessibleFiles: boolean;
    onExit: (code?: number) => Promise<never>;
    closing: boolean;
    constructor(options: CliReplOptions);
    start(driverUri: string, driverOptions: MongoClientOptions): Promise<void>;
    loadCommandLineFilesAndEval(files: string[]): Promise<void>;
    loadRcFiles(): Promise<void>;
    warnAboutInaccessibleFile(err: Error, path?: string): void;
    connect(driverUri: string, driverOptions: MongoClientOptions): Promise<CliServiceProvider>;
    getHistoryFilePath(): string;
    getConfig<K extends keyof CliUserConfig>(key: K): Promise<CliUserConfig[K]>;
    setConfig<K extends keyof CliUserConfig>(key: K, value: CliUserConfig[K]): Promise<'success'>;
    listConfigOptions(): string[];
    verifyNodeVersion(): Promise<void>;
    isPasswordMissingOptions(driverOptions: MongoClientOptions): boolean;
    isPasswordMissingURI(cs: ConnectionString): boolean;
    ensurePasswordFieldIsPresentInAuth(driverOptions: MongoClientOptions): void;
    requirePassword(): Promise<string>;
    private _fatalError;
    close(): Promise<void>;
    exit(code?: number): Promise<never>;
    readFileUTF8(filename: string): Promise<{
        contents: string;
        absolutePath: string;
    }>;
    clr(text: string, style: StyleDefinition): string;
    startMongocryptd(): Promise<AutoEncryptionOptions['extraOptions']>;
    bugReportErrorMessageInfo(): string;
    getLoggedEnvironmentVariables(): Record<string, string | undefined>;
}
export default CliRepl;
