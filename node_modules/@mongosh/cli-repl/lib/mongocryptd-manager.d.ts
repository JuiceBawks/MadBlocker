/// <reference types="node" />
import { ChildProcess } from 'child_process';
import { Readable } from 'stream';
import type { MongoshBus } from '@mongosh/types';
import { LogEntry } from './log-entry';
import { ShellHomeDirectory } from './config-directory';
export declare function getMongocryptdPaths(): Promise<string[][]>;
declare type MongocryptdState = {
    uri: string;
    proc: ChildProcess;
    interval: NodeJS.Timeout;
};
export declare class MongocryptdManager {
    spawnPaths: string[][];
    bus: MongoshBus;
    path: string;
    state: MongocryptdState | null;
    idleShutdownTimeoutSecs: number;
    constructor(spawnPaths: string[][], shellHomeDirectory: ShellHomeDirectory, bus: MongoshBus);
    start(): Promise<{
        mongocryptdURI: string;
        mongocryptdBypassSpawn: true;
    }>;
    close: () => this;
    createLogEntryIterator(stdout: Readable, pid: number): AsyncIterable<LogEntry>;
    _spawnMongocryptdProcess(spawnPath: string[]): ChildProcess;
    _spawn(): Promise<MongocryptdState>;
    _cleanupOldMongocryptdDirectories(): Promise<void>;
}
export {};
